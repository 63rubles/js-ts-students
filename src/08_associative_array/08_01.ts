export type UsersType = {
    [key: string] : {id: number, name: string}
}
//Ассоциативный массив - когда есть ключ значение. Удобный поиск сразу по ключу(зачастую ключом делают id)
export const users: UsersType = {
    '3434': {id: 3434, name: "Gera"},
    '443': {id: 443, name: "Nata"},
    '1': {id: 1, name: "Yanix"},
    '678': {id: 678, name: "Loki"},
}
//users[1].name
var user = {id: 100500, name: "Jopa"}
users[user.id] = user //если пользователь был с таким id, то старое значение перезатрётся на новое
delete users[user.id] //удаление происходит сразу
users[user.id].name = "Chacha" //перезатирание пользователя на нового

//-----------------------------------------

//Обычный массив состоящий из объектов без ключа. Поиск намного хуже, так как надо реализовыввать с помощью метода find(Если объектов будет очень много, то на поиск уйдёт время).
export const usersArray = [
    {id: 3434, name: "Gera"},
    {id: 443, name: "Nata"},
    {id: 1, name: "Yanix"},
    {id: 678, name: "Loki"},
]

var usersCopy = [...usersArray, user] //добавляем новый объект иммутабельно. А если такой объект уэе был с таким именем, значит надо отфильтровать массив для добавления нового, а это уже считается пробеганием по массиву методом filter, так же как и поиск с помощью find.
//var usersArray = usersArray.filter(u => u.id !== user.id) - удаление через фильтер занимание время